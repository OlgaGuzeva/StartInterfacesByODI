package loaddictisandostls;

import java.awt.Graphics;
import java.awt.Image;
import javax.swing.ImageIcon;
import static loaddictisandostls.Settings.PATH_TO_CAR;
import static loaddictisandostls.Settings.PATH_TO_CAR_2;
import static loaddictisandostls.Settings.PATH_TO_ICON_LOADING;
import static loaddictisandostls.Settings.prop;

/**
 *
 * @author guzeva
 */
public class MainFrame extends javax.swing.JFrame implements Runnable {
    
    private Image img;
    private boolean isLoading;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() { 
        isLoading = false;
        initComponents();
        Settings.getSettings(chosenServer.getSelectedItem().toString());
        run();
    }

    public void setIsLoading(boolean val){
        isLoading = val;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LoadDicts = new javax.swing.JButton();
        LoadOstls = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        statusField = new javax.swing.JTextArea();
        chosenServer = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        Car = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuSettings = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Load dictionaries and ostls");
        setBackground(new java.awt.Color(204, 204, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(new ImageIcon(PATH_TO_ICON_LOADING).getImage());
        setName("Load dictionaries and ostls"); // NOI18N

        LoadDicts.setText("Хочу грузить справочники");
        LoadDicts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadDictsActionPerformed(evt);
            }
        });

        LoadOstls.setText("Хочу грузить остатки");
        LoadOstls.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadOstlsActionPerformed(evt);
            }
        });

        statusField.setEditable(false);
        statusField.setColumns(20);
        statusField.setRows(5);
        jScrollPane2.setViewportView(statusField);

        chosenServer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "45.2", "45.10" }));
        chosenServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chosenServerActionPerformed(evt);
            }
        });

        jLabel1.setText("На каком сервере грузить:");

        Car.setIcon(new javax.swing.ImageIcon(PATH_TO_CAR));

        jMenuBar1.setForeground(new java.awt.Color(204, 204, 204));
        jMenuBar1.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N

        jMenu1.setText("File");

        menuSettings.setText("Настройки");
        menuSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSettingsActionPerformed(evt);
            }
        });
        jMenu1.add(menuSettings);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chosenServer, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LoadDicts, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LoadOstls, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Car)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chosenServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LoadDicts)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LoadOstls)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Car)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void LoadDictsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadDictsActionPerformed
        startOdiInterface(prop.getProperty("DICT_SCEN_NAME"),prop.getProperty("DICT_SCEN_VERSION"));
        isLoading = true;
        startImage();
    }//GEN-LAST:event_LoadDictsActionPerformed

    private void LoadOstlsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadOstlsActionPerformed
        startOdiInterface(prop.getProperty("OST_SCEN_NAME"),prop.getProperty("OST_SCEN_VERSION"));
    }//GEN-LAST:event_LoadOstlsActionPerformed

    private void menuSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSettingsActionPerformed
        SettingsFrame sf = new SettingsFrame();
    }//GEN-LAST:event_menuSettingsActionPerformed

    private void chosenServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chosenServerActionPerformed
        Settings.getSettings(chosenServer.getSelectedItem().toString());
    }//GEN-LAST:event_chosenServerActionPerformed

    private void startOdiInterface(String scenName, String scenVersion) {
        try{
            statusField.removeAll();
            statusField.append("Running scenario.... \n");
            OdiInvokeScenario call = new OdiInvokeScenario(this,scenName,scenVersion,
                             null,null,"GLOBAL",5,null,true);
            //call.run();
        }catch (Exception e){
            e.printStackTrace();            
        }        
    }
    
    public void setStatus(String text){
        statusField.append(text);
    }
    
    public void run() {
        setVisible(true);
    }
   
    
    public void startImage() {
        Thread thread = new Thread(){
            public void run(){
                int x = 12;
                int y = 213;
                boolean toRight = true;
                while(isLoading == true){
                    Car.setLocation(x,y);
                    if(x > 232){
                        toRight = !toRight;                        
                        Car.setIcon(new javax.swing.ImageIcon(PATH_TO_CAR_2));                    
                    }
                        
                    if(x <12){
                        Car.setIcon(new javax.swing.ImageIcon(PATH_TO_CAR));
                        toRight = !toRight;
                    }
                    
                    if(toRight){x++;} 
                    else{x--;}
                    
                    try {
			sleep(7);//TODO FPS
                    } catch (InterruptedException e) {
			e.printStackTrace();
                    } 
                }
            }
        };
        thread.start();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Car;
    private javax.swing.JButton LoadDicts;
    private javax.swing.JButton LoadOstls;
    private javax.swing.JComboBox<String> chosenServer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem menuSettings;
    private javax.swing.JTextArea statusField;
    // End of variables declaration//GEN-END:variables
}
